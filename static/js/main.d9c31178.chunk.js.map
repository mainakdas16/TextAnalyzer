{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","newText","toLocaleUpperCase","showAlert","toLowerCase","removedSpacesText","split","join","separateWord","i","length","charAt","toUpperCase","substring","copyText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","count","flag","countWords","Alert","alert","class","message","App","setmode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d9c31178.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href = \"/\" > {props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link active\" aria-current=\"page\" href = \"/\" >Home</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n\r\n                    <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\": \"light\"}`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Toggle Dark Mode</label>\r\n                    </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    function changetoUppercase() {\r\n        console.log(\"Uppercase button was clicked\");\r\n        let newText = text.toLocaleUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"Succes\");\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        console.log(\"Text is being changed\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const changetoLowercase = () => {\r\n        console.log(\"The text is being changed to lowerCase\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowerrcase\", \"Succes\");\r\n    }\r\n\r\n    const clearText = () => {\r\n        let newtext = \"\";\r\n        setText(newtext);\r\n        props.showAlert(\"Text is Cleared\", \"Succes\");\r\n    }\r\n\r\n    const countWords = () => {\r\n        let count = 0;\r\n\r\n        let flag = \"out\";\r\n        for(let i = 0; i < text.length; i++) {\r\n            if (text[i] === ' ' || text[i] === '\\n' || text[i] === '\\t') {\r\n\t\t\t    flag = \"out\";\r\n            }   \r\n\r\n            else if(flag === \"out\") {\r\n                flag = \"in\";\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    const removeSpaces = () => {\r\n        let originalText = text;\r\n        let removedSpacesText = originalText.split(\" \").join(\"\");\r\n\r\n        setText(removedSpacesText);\r\n        props.showAlert(\"Spaces Removed\", \"Succes\");\r\n    }\r\n\r\n    const capitalizeTheFirstLetterOfEachWord = () => {\r\n        let separateWord = text.toLowerCase().split(' ');\r\n        for (let i = 0; i < separateWord.length; i++) {\r\n           separateWord[i] = separateWord[i].charAt(0).toUpperCase() +\r\n           separateWord[i].substring(1);\r\n        }\r\n        let newText = separateWord.join(' ');\r\n\r\n        setText(newText);\r\n        props.showAlert(\"Capitalized First Letter\", \"Succes\");\r\n    }\r\n\r\n    const copyText = () => {\r\n        let copyText = document.getElementById(\"input-textArea\");\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(copyText.value);\r\n        props.showAlert(\"Copied\", \"Succes\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-5\" style={{color : props.mode === \"light\" ? \"black\": \"white\"}}>\r\n                <label htmlFor=\"input-textArea\" className=\"form-label\"> \r\n                   <h2>\r\n                        <b> {props.heading} </b>\r\n                   </h2>\r\n                </label>\r\n                <textarea className=\"form-control\" id=\"input-textArea\" rows=\"6\" value={text} onChange={changeHandler} style={{backgroundColor : props.mode === \"dark\" ? \"#050210\": \"white\", color : props.mode === \"light\" ? \"black\": \"white\"}}></textarea>\r\n\r\n                <button type=\"button\" className=\"btn btn-outline-primary my-2\" id='uppercase-btn' onClick={changetoUppercase}>Convert to Uppercase</button>\r\n                <button type=\"button\" className=\"btn btn-outline-secondary my-2 mx-1\" id='lowercase-btn'onClick={changetoLowercase}>Convert to Lowercase</button>\r\n                <button type=\"button\" className=\"btn btn-outline-success\" onClick={clearText}>Clear Text</button>\r\n                 <button type=\"button\" className=\"btn btn-outline-danger my-2 mx-1\" onClick={removeSpaces}>Remove Spaces</button>\r\n                <button type=\"button\" className=\"btn btn-outline-warning\" onClick={capitalizeTheFirstLetterOfEachWord}>Capitalize First Letter</button>\r\n                <button type=\"button\" className=\"btn btn-outline-info my-2 mx-1\" onClick={copyText}>Copy Text</button>\r\n                {/* <button type=\"button\" className=\"btn btn-outline-light\">Light</button>\r\n                <button type=\"button\" className=\"btn btn-outline-dark\">Dark</button> */}\r\n            </div>\r\n\r\n            <div className=\"container\" style={{color : props.mode === \"light\" ? \"black\": \"white\"}}>\r\n                <h2>Text Summary</h2>\r\n                <p>\r\n                    <i> Your text contains <b> {countWords()} words</b> and <b>{text.length} characters</b></i>\r\n                </p>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{props.alert.type}</strong>:  {props.alert.message}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n// \tBrowserRouter as Router,\n// \tSwitch,\n// \tRoute,\n// \t// Link,\n// \t// useRouteMatch,\n// \t// useParams\n// } from \"react-router-dom\";\n// import About from './components/About';\n\nfunction App() {\n\n\tconst [mode, setmode] = useState(\"light\");\n\tconst [alert, setAlert] = useState(null);\n\n\tconst showAlert = (message, type) => {\n\t\tsetAlert(\n\t\t\t{\n\t\t\t\tmessage: message,\n\t\t\t\ttype: type\n\t\t\t}\n\t\t)\n\n\t\tsetTimeout(() => {\n\t\t\tsetAlert(null);\n\t\t}, 1500);\n\t}\n\n\tconst toggleMode = () => {\n\t\tif(mode === \"light\") {\n\t\t\tsetmode(\"dark\");\n\t\t\tdocument.body.style.backgroundColor = \"#021024\";\n\t\t\tshowAlert(\"Dark mode has been enabled\", \"Success\");\n\t\t}\n\n\t\telse {\n\t\t\tsetmode(\"light\");\n\t\t\tdocument.body.style.backgroundColor = \"white\";\n\t\t\tshowAlert(\"Light mode has been enabled\", \"Success\");\n\t\t}\n\t}\n\n   \treturn (\n\t<>\n\t\n\t\t<Navbar title = \"TextAnalyzer\" mode = {mode} toggleMode = {toggleMode} />\n\t\t<Alert alert = {alert} />\n\t\t<div className=\"container\">\t\n\t\t\t<Textform heading = \"Type your text here\" mode = {mode} showAlert = {showAlert}/>\n\t\t</div>\n\t</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}